/**
 * Copyright (C) 2020 TU Dresden
 *
 * This benchmark is particularly interesting for LF, as it has an interesting structure and
 * highlights a significant advantage compared to Akka. The benchmark implements a "filter bank".
 * Each bank consists of a pipeline of several filters. The banks operate in parallel. The input
 * data stream is split, so that each bank receives a copy of the data value, and the data streams
 * are merged again by summing the results. In principle, this design exposes both data level
 * parallelism due to the separate banks and pipeline parallelism within a bank. However, this LF
 * implementation does not exploit the pipeline parallelism. This would require additional logical
 * actions between the pipeline stages. The effect of this unknown and it might be worthwhile to
 * explore if pipeline parallelism can be exploited by this benchmakr in an efficient way. However,
 * since only the FIR filter perform large computations and most other reactions are small, likely
 * there is not much to gain from implementing a real pipeline.
 *
 * An interesting note can also be made about the structure and complexity of the LF benchmark
 * compared to the Akka implementation. The Akka implementation uses a "Branches" actor that
 * distributes the single input signal to the banks. In LF, this actor is not needed and we simply
 * use a broadcast connection.
 *
 * More interesting, is how the outputs of the different banks are merged in the Akka
 * implementation. This is done by two actors: "TaggedForward" and "Integrator". "TaggedForward"
 * simply assigns tags to each message which indicate the bank that the message originates from.
 * Essentially this merges the N data streams from the N banks to a single data stream. Unless the
 * name might suggest, the "Integrate" does not apply an integrarion filter on the data, but rather
 * collects results and "integrates" them in a vector. Basically the input is 1 value from N banks,
 * and the output is one N-dimensional vector. The integrate vector simply stores all received
 * values in a buffer, and sends out a vector containing values from all banks once messages from
 * all banks have been received. This synchronization mechanism is not needed at all in the LF
 * implementation and makes both the "TaggedForward" and the "Integrate" actors superflous. The
 * combine reactor simply has a multiport import and thus simultaneously receives values from all N
 * banks.
 *
 * @author Christian Menard
 * @author Hannes Klein
 * @author Johannes HayeÃŸ
 */
target Rust {
  build-type: Release,
  cargo-features: ["cli"],
  rust-include: "../lib/matrix.rs"
}

import BenchmarkRunner from "../lib/BenchmarkRunner.lf"

reactor Producer(
    num_channels: usize = 8,
    num_simulations: usize = 34816,
    num_columns: usize = 16384) {
  state num_simulations = num_simulations

  state numMessagesSent: usize = 0

  input start: unit
  output next: unit
  output finished: unit

  logical action sendNext: unit

  reaction(start) -> sendNext {=
    // reset local state
    self.numMessagesSent = 0;

    // start execution
    ctx.schedule(sendNext, Asap);
  =}

  reaction(sendNext) -> sendNext, next, finished {=
    if self.numMessagesSent < self.num_simulations {
        ctx.set(next, ());
        self.numMessagesSent += 1;
        ctx.schedule(sendNext, Asap);
    } else {
        ctx.set(finished, ());
    }
  =}
}

reactor Source {
  state max_value: usize = 1000
  state current: usize = 0

  input next: unit
  output value: f64

  input in_finished: unit
  output out_finished: unit

  reaction(next) -> value {=
    ctx.set(value, self.current as f64);
    self.current = (self.current + 1) % self.max_value;
  =}

  reaction(in_finished) -> out_finished {=
    ctx.set(out_finished, ());
    // reset local state
    self.current = 0;
  =}
}

reactor Bank(
    bank_index: usize = 0,
    num_columns: usize = 16384,
    num_channels: usize = 8,
    coefficients: super::filter_bank::MatrixPair = {= panic!("") =}) {
  input in_value: f64
  input in_finished: unit
  output out_value: f64
  output out_finished: unit

  input set_f: Arc<Matrix<f64>>
  input set_h: Arc<Matrix<f64>>

  preamble {=
    use std::sync::Arc;
    use crate::matrix::Matrix;
  =}

  delay0 = new Delay(delayLength = {= num_columns - 1 =})
  fir0 = new FirFilter(
      bank_index=bank_index,
      peekLength=num_columns,
      coefficients = {= coefficients.0.clone() =})
  sample = new SampleFilter(sampleRate=num_columns)
  delay1 = new Delay(delayLength = {= num_columns - 1 =})
  fir1 = new FirFilter(
      bank_index=bank_index,
      peekLength=num_columns,
      coefficients = {= coefficients.1.clone() =})

  in_finished,
  delay0.out_finished,
  fir0.out_finished,
  sample.out_finished,
  delay1.out_finished,
  fir1.out_finished ->
    delay0.in_finished,
    fir0.in_finished,
    sample.in_finished,
    delay1.in_finished,
    fir1.in_finished,
    out_finished

  in_value, delay0.out_value, fir0.out_value, sample.out_value, delay1.out_value, fir1.out_value
    -> delay0.in_value, fir0.in_value, sample.in_value, delay1.in_value, fir1.in_value, out_value
}

reactor Delay(delayLength: usize = 16383) {
  state delay_length = delayLength

  state my_state: Vec<f64>
  state placeholder: usize = 0

  input in_value: f64
  input in_finished: unit
  output out_value: f64
  output out_finished: unit

  reaction(startup) {=
    // one time init
    self.my_state = vec![0.0; self.delay_length];
    self.placeholder = 0;
  =}

  reaction(in_value) -> out_value {=
    let result = ctx.get(in_value).unwrap();
    ctx.set(out_value, self.my_state[self.placeholder]);
    self.my_state[self.placeholder] = result;
    self.placeholder = (self.placeholder + 1) % self.delay_length;
  =}

  reaction(in_finished) -> out_finished {=
    ctx.set(out_finished, ());

    // reset local state
    self.my_state = vec![0.0; self.delay_length];
    self.placeholder = 0;
  =}
}

reactor FirFilter(
    bank_index: usize = 0,
    peekLength: usize = 16384,
    coefficients: Arc<Matrix<f64>> = {= panic!("") =}) {
  state bank_index = bank_index
  state peek_length = peekLength

  state data: Vec<f64>
  state data_index: usize = 0
  state data_full: bool = false
  state coefficients: Arc<Matrix<f64>> = coefficients

  input in_value: f64
  input in_finished: unit
  output out_value: f64
  output out_finished: unit

  preamble {=
    use std::sync::Arc;
    use crate::matrix::Matrix;
  =}

  reaction(startup) {=
    // reset local state
    self.data = vec![0.0; self.peek_length];
    self.data_index = 0;
    self.data_full = false;
  =}

  reaction(in_value) -> out_value {=
    self.data[self.data_index] = ctx.get(in_value).unwrap();
    self.data_index += 1;

    if self.data_index == self.peek_length {
        self.data_full = true;
        self.data_index = 0;
    }

    if self.data_full {
        let mut sum = 0.0;
        for (i, d) in self.data.iter().enumerate() {
            sum += self.data[i] * self.coefficients.get(self.bank_index, self.peek_length - i - 1);
        }
        ctx.set(out_value, sum);
    }
  =}

  reaction(in_finished) -> out_finished {=
    ctx.set(out_finished, ());

    // reset local state
    self.data = vec![0.0; self.peek_length];
    self.data_index = 0;
    self.data_full = false;
  =}
}

reactor SampleFilter(sampleRate: usize = 16384) {
  state sample_rate = sampleRate

  state samples_received: usize = 0

  input in_value: f64
  input in_finished: unit
  output out_value: f64
  output out_finished: unit

  reaction(in_value) -> out_value {=
    if self.samples_received == 0 {
        ctx.set(out_value, ctx.get(in_value).unwrap());
    } else {
        ctx.set(out_value, 0.0);
    }
    self.samples_received = (self.samples_received + 1) % self.sample_rate;
  =}

  reaction(in_finished) -> out_finished {=
    ctx.set(out_finished, ());

    // reset local state
    self.samples_received = 0;
  =}
}

reactor Combine(num_channels: usize = 8) {
  state num_channels = num_channels

  input[num_channels] inValues: f64
  input[num_channels] in_finished: unit
  output out_value: f64
  output out_finished: unit

  state num_finished: usize = 0

  reaction(inValues) -> out_value {=
    let mut sum = 0.0;
    for x in inValues {
        sum += ctx.get(x).unwrap();
    }
    ctx.set(out_value, sum);
  =}

  reaction(in_finished) -> out_finished {=
    self.num_finished += in_finished.iterate_set().count();

    if self.num_finished == self.num_channels {
        ctx.set(out_finished, ());
        // reset local state
        self.num_finished = 0;
    }
  =}
}

reactor Sink(printRate: usize = 100) {
  state print_rate = printRate

  state count: usize = 0

  input in_value: f64
  input in_finished: unit
  output out_finished: unit

  reaction(in_value) {=
    let result = ctx.get(in_value).unwrap();

    if self.count % self.print_rate == 0 {
        info!("SinkActor: result = {}", result);
    }
    self.count += 1;
  =}

  reaction(in_finished) -> out_finished {=
    ctx.set(out_finished, ());
    // reset local state
    self.count = 0;
  =}
}

main reactor(
    num_iterations: usize = 12,
    num_simulations: usize = 34816,
    num_columns: usize = 16384,
    num_channels: usize = 8) {
  state num_iterations = num_iterations
  state num_simulations = num_simulations
  state num_columns = num_columns
  state num_channels = num_channels

  preamble {=
    use std::sync::Arc;
    pub type MatrixPair = (Arc<Matrix<f64>>, Arc<Matrix<f64>>);

    fn create_coeffs(num_channels: usize, num_columns: usize) -> MatrixPair {
        // initialize the coefficients of all FIR filters
        let mut mH: Matrix<f64> = Matrix::new(num_channels, num_columns);
        let mut mF: Matrix<f64> = Matrix::new(num_channels, num_columns);

        for j in 0..num_channels {
            for i in 0..num_columns {
                let h = ((i * num_columns) + (j * num_channels) + j + i + j + 1) as f64;
                let f = ((i * j) + (j * j) + j + i) as f64;
                mH.set(j, i, h);
                mF.set(j, i, f);
            }
        }

        // convert to immutable pointers before sending. This ensures that all recipients can receive a pointer
        // to the same matrix and no copying is needed
        (Arc::new(mH), Arc::new(mF))
    }
  =}

  runner = new BenchmarkRunner(num_iterations=num_iterations)
  producer = new Producer(
      num_simulations=num_simulations,
      num_channels=num_channels,
      num_columns=num_columns)
  source = new Source()
  banks = new[num_channels] Bank(
      num_columns=num_columns,
      num_channels=num_channels,
      coefficients = {= create_coeffs(num_channels, num_columns) =})
  combine = new Combine(num_channels=num_channels)
  sink = new Sink(printRate=100)

  runner.start -> producer.start

  producer.next -> source.next
  producer.finished -> source.in_finished

  (source.value)+ -> banks.in_value
  (source.out_finished)+ -> banks.in_finished

  banks.out_value -> combine.inValues
  banks.out_finished -> combine.in_finished

  combine.out_value -> sink.in_value
  combine.out_finished -> sink.in_finished

  sink.out_finished -> runner.finished

  preamble {=
    use crate::{print_args,reactors::benchmark_runner::{print_system_info, print_benchmark_info}};
    use crate::matrix::Matrix;
  =}

  reaction(startup) -> banks.set_f, banks.set_h {=
    print_benchmark_info("FilterBankBenchmark");
    print_args!(
        "num_iterations",
        self.num_iterations,
        "num_simulations",
        self.num_simulations,
        "num_columns",
        self.num_columns,
        "num_channels",
        self.num_channels
    );
    print_system_info();
  =}
}
